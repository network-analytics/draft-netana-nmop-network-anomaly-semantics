module ietf-symptom-semantic-metadata {
    yang-version 1.1;
    namespace "urn:ietf:params:xml:ns:yang:ietf-symptom-label";
    prefix symptom_labelling;

    import ietf-yang-types {
        prefix yang;
        reference
          "RFC 6991: Common YANG Data Types";
    }

    organization
        "TBD";
    contact
        "TBD";
    description
        "This module defines objects for the description of symptoms identified
         within observability data, produced by devices, such as network nodes.
         Symptoms represent behaviours that are unexpected or undesired with
         respect to the context in which they are identified.

         This can be intended to be measured by mean of counters and gauges
         collected from the network nodes, as well as logs, and other forms of
         real time data that is collected and exported, with the scope to be
         further analysed.

         The module proposed in this document aims at adding meaningful metadata
          to the incident data itself.

         Copyright (c) 2023 IETF Trust and the persons identified as
         authors of the code.  All rights reserved.

         Redistribution and use in source and binary forms, with or
         without modification, is permitted pursuant to, and subject
         to the license terms contained in, the Revised BSD License
         set forth in Section 4.c of the IETF Trust's Legal Provisions
         Relating to IETF Documents
         (https://trustee.ietf.org/license-info).";

    revision 2023-10-30 {
        description
          "Initial version";
        reference
          "IETF Draft: Network Symptom Detection Labels";
    }

    grouping symptom-group {
        container symptom {
            leaf id {
                type yang:uuid;
                mandatory "true";
                description
                    "Unique ID of the symptom type";
            }
            leaf description {
                type string;
                mandatory "true";
                description
                    "Textual description of the symptom";
            }
            choice plane {
                mandatory "false";
                description
                    "Network Plane affected by the symptom";
                case forwarding-plane {
                    leaf forwarding-plane {
                        mandatory "true";
                        type empty;
                    }
                }
                case control-plane {
                    leaf control-plane {
                        mandatory "true";
                        type empty;
                    }
                }
                case management-plane {
                    leaf management-plane {
                        mandatory "true";
                        type empty;
                    }
                }
            }
            leaf condition {
                mandatory "false";
                type string;
            }
            leaf action {
                mandatory "false";
                type string;
            }
            leaf cause {
                mandatory "false";
                type string;
            }
            leaf entity_type {
                mandatory "false";
                type yang:uuid;
                description 
                    "Type of the entity affected by the symptom. Entites can be objects in the network inventory, subservices as defined in SAIN, etc.";
            }
            choice pattern {
                mandatory "false";
                description
                    "Network Plane affected by the symptom";
                case drop {
                    leaf drop {
                        mandatory "true";
                        type empty;
                    }
                }
                case spike {
                    leaf spike {
                        mandatory "true";
                        type empty;
                    }
                }
                case mean-shift {
                    leaf mean-shift {
                        mandatory "true";
                        type empty;
                    }
                }
                case seasonality-shift {
                    leaf seasonality-shift {
                        mandatory "true";
                        type empty;
                    }
                }
                case trend {
                    leaf trend {
                        mandatory "true";
                        type empty;
                    }
                }
                case other {
                    leaf other {
                        type string;
                        mandatory "true";
                        description "specify the type";
                    }
                }
            }
        }
    }
    uses symptom-group;
}
